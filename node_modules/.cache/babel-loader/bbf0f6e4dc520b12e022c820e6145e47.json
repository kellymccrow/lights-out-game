{"ast":null,"code":"import _slicedToArray from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.createBoard = _this.createBoard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var rows = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          rows.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(rows);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var tableBoard = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          var coord = \"\".concat(i - x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: this.state.board[i][x],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 18\n            }\n          }));\n        }\n\n        tableBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 23\n          }\n        }, row));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }\n      }, tableBoard))); // if the game is won, just show a winning msg & render nothing else\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","bind","i","nrows","rows","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","y","flipCell","tableBoard","row","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n    this.createBoard = this.createBoard.bind(this);\n  }\n\n  createBoard() {\n    let board = [];\n    for(let i = 0; i < this.props.nrows; i++){\n      let rows = [];\n      for(let x = 0; x < this.props.ncols; x++){\n        rows.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(rows)\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    let tableBoard = [];\n    for(let i = 0; i < this.props.nrows; i ++){\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++){\n        let coord = `${i-x}`\n        row.push(<Cell key={coord} isLit={this.state.board[i][x]}/>)\n      }\n      tableBoard.push(<tr key={i}>{row}</tr>)\n    }\n    return (\n      <div>\n        <table className='Board'>\n          <tbody>\n            {tableBoard}\n          </tbody>\n        </table>\n      </div>\n    )\n    // if the game is won, just show a winning msg & render nothing else\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}