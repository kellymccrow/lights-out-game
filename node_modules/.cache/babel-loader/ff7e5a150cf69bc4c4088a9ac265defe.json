{"ast":null,"code":"import _slicedToArray from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/src/Board.js\";\nimport React, { Component } from \"react\"; // import Cell from \"./Cell\";\n\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.createBoard = _this.createBoard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var rows = [];\n\n        for (var _i = 0; _i < this.props.ncols; _i++) {\n          var booleans = [true, false];\n          var col = Math.floor(Math.random() * booleans.length);\n          rows.push(booleans[col]);\n        }\n\n        board.push(rows);\n      } // TODO: create array-of-arrays of true/false values\n\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // const table = this.state.board.map(row => {\n      //   return <tr></tr>\n      // })\n      var table = this.state.board.forEach(function (row) {\n        return row.map(function (col) {\n          return col;\n        });\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }\n      }, console.log(table)))); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5\n};\nexport default Board;","map":{"version":3,"sources":["/Users/kellymccrow-young/Desktop/React/11-lights-out-exercise/src/Board.js"],"names":["React","Component","Board","props","state","hasWon","board","createBoard","bind","i","nrows","rows","ncols","booleans","col","Math","floor","random","length","push","coord","split","map","Number","y","x","flipCell","table","forEach","row","console","log","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\n// import Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n    this.createBoard = this.createBoard.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    for(let i = 0; i < this.props.nrows; i++){\n      let rows = [];\n      for(let i = 0; i < this.props.ncols; i++){\n        let booleans = [true, false];\n        let col = Math.floor(Math.random() * booleans.length);\n        rows.push(booleans[col])\n      }\n      board.push(rows)\n    }\n    // TODO: create array-of-arrays of true/false values\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    // const table = this.state.board.map(row => {\n    //   return <tr></tr>\n    // })\n\n    const table = this.state.board.forEach(row => {\n      return row.map(col => {\n        return col;\n      })\n    });\n    return (\n      <div>\n        <table>\n          <tbody>\n            {console.log(table)}\n          </tbody>\n        </table>\n      </div>\n    )\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}